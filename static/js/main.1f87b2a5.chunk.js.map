{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","selectedzone","setselectedzone","Zones","setzones","flag","setFlag","selectref","useRef","GetDetails","e","console","log","current","value","url","axios","get","crossdomain","then","result","data","timestamp","catch","error","useEffect","zones","interval","setInterval","clearInterval","date","Date","className","style","textAlign","onChange","ref","title","map","zone","zoneName","fontSize","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","countryName","countryCode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAAe,I,4BC4HAA,MAtHf,WAAgB,IAAD,EAG2BC,mBAAS,IAHpC,mBAGNC,EAHM,KAGQC,EAHR,OAIaF,mBAAS,IAJtB,mBAING,EAJM,KAICC,EAJD,OAKWJ,oBAAS,GALpB,mBAKNK,EALM,KAKAC,EALA,KAOPC,EAAYC,iBAAO,IAIrBC,EAAW,SAACC,GAClBC,QAAQC,IAAIL,EAAUM,QAAQC,OAE5B,IAAIC,EAAG,+FAA2FR,EAAUM,QAAQC,OACpHE,IAAMC,IAAIF,EAAI,CAAEG,aAAa,IAAQC,MAAK,SAACC,GAEzClB,GAAgB,kBAAMkB,EAAOC,QAC7Bf,GAAQ,GACRK,QAAQC,IAAIQ,EAAOC,KAAKC,cAClBC,OAAM,SAACC,GACTb,QAAQC,IAAI,QAAQY,MAEtBb,QAAQC,IAAIP,IAIhBoB,qBAAU,WACTT,IAAMC,IAAN,6EAAuF,CAAEC,aAAa,IAAQC,MAAK,SAACC,GAC9GhB,GAAS,kBAAKgB,EAAOC,KAAKK,YAE1BH,OAAM,SAACC,GACRb,QAAQC,IAAI,QAAQY,QAGxB,IAIFC,qBAAU,WACR,GAAGlB,EAAUM,QAAQC,QACnBH,QAAQC,IAAI,OAAOP,GAChBA,GACJ,IAAIsB,EAAWC,aAAY,WAEtBnB,MACC,KAGN,OAAO,kBAAMoB,cAAcF,OAIhC,IAAIL,EAAYrB,EAAaqB,UACzBQ,EAAO,IAAIC,KAAKT,GAKlB,OACE,qBAAKU,UAAU,MAAf,SACG,8BACE,qBAAKA,UAAU,OAAf,SACA,sBAAKA,UAAU,WAAf,UACA,oBAAIC,MAAO,CAACC,UAAY,UAAxB,kCAEA,qBAAKF,UAAU,GAAf,SACD,yBAAQA,UAAU,eAAeG,SAAU1B,EAAY2B,IAAK7B,EAA5D,UACA,wBAAQO,MAAM,GAAGuB,MAAM,aAAvB,wBACIlC,EAAMmC,KAAK,SAACC,GAAD,OACV,wBAA8BzB,MAAOyB,EAAKC,SAA1C,SAAqDD,EAAKC,UAA5CD,EAAKC,kBAMxB,0DAER,qBAAKP,MAAO,CAACQ,SAAS,QAAtB,SAIKnB,GAA0B,IAAbA,GACb,wBAAOU,UAAU,kDAAjB,UACE,gCAAO,+BACL,2CACC,sCACC,6CACA,kDAIC,gCACG,+BACG,6BAAK/B,EAAaqB,YAClB,6BAAKQ,EAAKY,UAAW,KAAKZ,EAAKa,WAAW,GAAI,IAAIb,EAAKc,cAAe,IAAId,EAAKe,WAAY,IAAIf,EAAKgB,aAAc,IAAIhB,EAAKiB,eAC3H,6BAAK9C,EAAa+C,cAClB,6BAAK/C,EAAagD,kCC3FrBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1f87b2a5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React ,{useState, useEffect, useRef} from \"react\";\nimport axios from 'axios';\n\n\nfunction App() {\n\n\n  const [selectedzone ,setselectedzone] = useState([]); \n  const [Zones ,setzones] = useState([]);\n  const [flag, setFlag] = useState(false);\n\n  const selectref = useRef(\"\");\n\n \n\nconst GetDetails=(e) =>{\nconsole.log(selectref.current.value);\n\n  let url = `http://api.timezonedb.com/v2/get-time-zone?key=XWSLLPX5RMIZ&format=json&by=zone&zone=${selectref.current.value}`;\n  axios.get(url,{ crossdomain: true }).then((result)=>{\n        \n    setselectedzone(() => result.data);\n    setFlag(true); \n    console.log(result.data.timestamp);\n       }).catch((error)=>{ \n        console.log(\"Error\",error); \n      });\n      console.log(flag)\n\n}\n\n  useEffect(() => {\n   axios.get(`http://api.timezonedb.com/v2.1/list-time-zone?key=XWSLLPX5RMIZ&format=json`,{ crossdomain: true }).then((result)=>{\n         setzones(()=> result.data.zones);\n       \n      }).catch((error)=>{ \n        console.log(\"Error\",error); \n      });\n     \n  },[]); \n\n\n\n  useEffect(() => {\n    if(selectref.current.value){\n      console.log(\"flag\",flag); \n      if(flag){\n     var interval = setInterval(() => {\n         \n          GetDetails(); \n        }, 5000);\n      }\n       } \n     return () => clearInterval(interval); \n  }); \n\n\nvar timestamp = selectedzone.timestamp\nvar date = new Date(timestamp);\n\n  \n\n\n  return (\n    <div className=\"App\">\n       <div >\n         <div className=\"row \"> \n         <div className='col-md-6'>\n         <h2 style={{textAlign : 'center'}}>Get timeZone Details</h2> \n\n         <div className=\"\"> \n        <select className=\"form-control\" onChange={GetDetails} ref={selectref}>   \n        <option value=\"\" title=\"--select--\">--select--</option>  \n           {Zones.map ((zone) => ( \n             <option  key={zone.zoneName}  value={zone.zoneName}>{zone.zoneName}</option>  \n\n            ))}  \n       </select> \n        </div>\n\n        <p>Below are Zone Details:- </p>\n\n<div style={{fontSize:\"20px\"}}>\n\n\n{\n    (timestamp && timestamp !==0) && \n    (<table className=\"table table-condensed table-hover table-striped\">\n       <thead><tr> \n         <th>TimeStamp</th>\n          <th>Date</th>\n           <th>CountryName</th> \n           <th>CountryCode</th> \n            </tr> \n       </thead> \n            \n            <tbody>\n               <tr>\n                  <td>{selectedzone.timestamp}</td> \n                  <td>{date.getDate()+ \"/\"+(date.getMonth()+1)+ \"/\"+date.getFullYear()+ \" \"+date.getHours()+ \":\"+date.getMinutes()+ \":\"+date.getSeconds()}</td> \n                  <td>{selectedzone.countryName}</td> \n                  <td>{selectedzone.countryCode}</td> \n                  </tr>\n                   </tbody>  \n              </table>)\n} \n\n</div> \n\n         </div>\n         </div>\n\n        \n \n\n   \n         </div>\n        \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}